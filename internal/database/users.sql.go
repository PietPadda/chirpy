// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(), -- generate a unique id
    NOW(),             -- current time
    NOW(),             -- current time
    $1,                -- gen code will input email
    $2                 -- insert hashed pw via handler
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

// users.sql
// add "one" user to the DB by email address
// func generated will return these values for use in code
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
LIMIT 1
`

// select one user by email
// by user email as input
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE id = $1
LIMIT 1
`

// select one user by user_id
// by user id as input
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users
`

// "reset" all users
func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const setIsChirpyRedTrue = `-- name: SetIsChirpyRedTrue :one
UPDATE users
SET
  is_chirpy_red = TRUE, -- now premium!
  updated_at = NOW()   -- audit trail
WHERE id = $1
RETURNING id, is_chirpy_red
`

type SetIsChirpyRedTrueRow struct {
	ID          uuid.UUID
	IsChirpyRed bool
}

// set user is_chirp_red to true
// by user id as input
func (q *Queries) SetIsChirpyRedTrue(ctx context.Context, id uuid.UUID) (SetIsChirpyRedTrueRow, error) {
	row := q.db.QueryRowContext(ctx, setIsChirpyRedTrue, id)
	var i SetIsChirpyRedTrueRow
	err := row.Scan(&i.ID, &i.IsChirpyRed)
	return i, err
}

const updateUserLogin = `-- name: UpdateUserLogin :one
UPDATE users 
SET 
  updated_at = NOW(),  -- audit trail
  email = $2, -- user provides new email
  hashed_password = $3 -- user provides new password
WHERE id = $1 -- use userid from token get bearer (unique as it's a pk) 
RETURNING updated_at
`

type UpdateUserLoginParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

// return only updated_at to match resp timestamp (rest are inputs from code, no need to return)
func (q *Queries) UpdateUserLogin(ctx context.Context, arg UpdateUserLoginParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, updateUserLogin, arg.ID, arg.Email, arg.HashedPassword)
	var updated_at time.Time
	err := row.Scan(&updated_at)
	return updated_at, err
}
